/// <reference types="node" />
export const DriveBot: {
    drives: any[];
    verbose: any;
    watchers: any[];
    watch(): void;
    watcher: import("fs").FSWatcher | undefined;
    scan(): Promise<import("./Volume.js").Volume[]>;
    updateDrives(): Promise<void>;
    getDriveById(id: any): Promise<any>;
    eject(id: any): Promise<any>;
    ejectDevice(deviceName: any): Promise<any>;
    getDrive(driveName: any): Promise<any>;
    getDriveByMountpoint(mountpoint: any): any;
    getDriveBySerial(serialNumber: any): Promise<any>;
    getDrives(): Promise<any[]>;
    getMountPoint(mountpoint: any): Promise<any>;
    getCurrentVolumeName(serialNumber: any): Promise<any>;
    log(message: any, type: any): void;
    addListener(eventName: string | symbol, listener: (...args: any[]) => void): {
        drives: any[];
        verbose: any;
        watchers: any[];
        watch(): void;
        watcher: import("fs").FSWatcher | undefined;
        scan(): Promise<import("./Volume.js").Volume[]>;
        updateDrives(): Promise<void>;
        getDriveById(id: any): Promise<any>;
        eject(id: any): Promise<any>;
        ejectDevice(deviceName: any): Promise<any>;
        getDrive(driveName: any): Promise<any>;
        getDriveByMountpoint(mountpoint: any): any;
        getDriveBySerial(serialNumber: any): Promise<any>;
        getDrives(): Promise<any[]>;
        getMountPoint(mountpoint: any): Promise<any>;
        getCurrentVolumeName(serialNumber: any): Promise<any>;
        log(message: any, type: any): void;
        addListener(eventName: string | symbol, listener: (...args: any[]) => void): any;
        on(eventName: string | symbol, listener: (...args: any[]) => void): any;
        once(eventName: string | symbol, listener: (...args: any[]) => void): any;
        removeListener(eventName: string | symbol, listener: (...args: any[]) => void): any;
        off(eventName: string | symbol, listener: (...args: any[]) => void): any;
        removeAllListeners(event?: string | symbol | undefined): any;
        setMaxListeners(n: number): any;
        getMaxListeners(): number;
        listeners(eventName: string | symbol): Function[];
        rawListeners(eventName: string | symbol): Function[];
        emit(eventName: string | symbol, ...args: any[]): boolean;
        listenerCount(eventName: string | symbol): number;
        prependListener(eventName: string | symbol, listener: (...args: any[]) => void): any;
        prependOnceListener(eventName: string | symbol, listener: (...args: any[]) => void): any;
        eventNames(): (string | symbol)[];
    };
    on(eventName: string | symbol, listener: (...args: any[]) => void): {
        drives: any[];
        verbose: any;
        watchers: any[];
        watch(): void;
        watcher: import("fs").FSWatcher | undefined;
        scan(): Promise<import("./Volume.js").Volume[]>;
        updateDrives(): Promise<void>;
        getDriveById(id: any): Promise<any>;
        eject(id: any): Promise<any>;
        ejectDevice(deviceName: any): Promise<any>;
        getDrive(driveName: any): Promise<any>;
        getDriveByMountpoint(mountpoint: any): any;
        getDriveBySerial(serialNumber: any): Promise<any>;
        getDrives(): Promise<any[]>;
        getMountPoint(mountpoint: any): Promise<any>;
        getCurrentVolumeName(serialNumber: any): Promise<any>;
        log(message: any, type: any): void;
        addListener(eventName: string | symbol, listener: (...args: any[]) => void): any;
        on(eventName: string | symbol, listener: (...args: any[]) => void): any;
        once(eventName: string | symbol, listener: (...args: any[]) => void): any;
        removeListener(eventName: string | symbol, listener: (...args: any[]) => void): any;
        off(eventName: string | symbol, listener: (...args: any[]) => void): any;
        removeAllListeners(event?: string | symbol | undefined): any;
        setMaxListeners(n: number): any;
        getMaxListeners(): number;
        listeners(eventName: string | symbol): Function[];
        rawListeners(eventName: string | symbol): Function[];
        emit(eventName: string | symbol, ...args: any[]): boolean;
        listenerCount(eventName: string | symbol): number;
        prependListener(eventName: string | symbol, listener: (...args: any[]) => void): any;
        prependOnceListener(eventName: string | symbol, listener: (...args: any[]) => void): any;
        eventNames(): (string | symbol)[];
    };
    once(eventName: string | symbol, listener: (...args: any[]) => void): {
        drives: any[];
        verbose: any;
        watchers: any[];
        watch(): void;
        watcher: import("fs").FSWatcher | undefined;
        scan(): Promise<import("./Volume.js").Volume[]>;
        updateDrives(): Promise<void>;
        getDriveById(id: any): Promise<any>;
        eject(id: any): Promise<any>;
        ejectDevice(deviceName: any): Promise<any>;
        getDrive(driveName: any): Promise<any>;
        getDriveByMountpoint(mountpoint: any): any;
        getDriveBySerial(serialNumber: any): Promise<any>;
        getDrives(): Promise<any[]>;
        getMountPoint(mountpoint: any): Promise<any>;
        getCurrentVolumeName(serialNumber: any): Promise<any>;
        log(message: any, type: any): void;
        addListener(eventName: string | symbol, listener: (...args: any[]) => void): any;
        on(eventName: string | symbol, listener: (...args: any[]) => void): any;
        once(eventName: string | symbol, listener: (...args: any[]) => void): any;
        removeListener(eventName: string | symbol, listener: (...args: any[]) => void): any;
        off(eventName: string | symbol, listener: (...args: any[]) => void): any;
        removeAllListeners(event?: string | symbol | undefined): any;
        setMaxListeners(n: number): any;
        getMaxListeners(): number;
        listeners(eventName: string | symbol): Function[];
        rawListeners(eventName: string | symbol): Function[];
        emit(eventName: string | symbol, ...args: any[]): boolean;
        listenerCount(eventName: string | symbol): number;
        prependListener(eventName: string | symbol, listener: (...args: any[]) => void): any;
        prependOnceListener(eventName: string | symbol, listener: (...args: any[]) => void): any;
        eventNames(): (string | symbol)[];
    };
    removeListener(eventName: string | symbol, listener: (...args: any[]) => void): {
        drives: any[];
        verbose: any;
        watchers: any[];
        watch(): void;
        watcher: import("fs").FSWatcher | undefined;
        scan(): Promise<import("./Volume.js").Volume[]>;
        updateDrives(): Promise<void>;
        getDriveById(id: any): Promise<any>;
        eject(id: any): Promise<any>;
        ejectDevice(deviceName: any): Promise<any>;
        getDrive(driveName: any): Promise<any>;
        getDriveByMountpoint(mountpoint: any): any;
        getDriveBySerial(serialNumber: any): Promise<any>;
        getDrives(): Promise<any[]>;
        getMountPoint(mountpoint: any): Promise<any>;
        getCurrentVolumeName(serialNumber: any): Promise<any>;
        log(message: any, type: any): void;
        addListener(eventName: string | symbol, listener: (...args: any[]) => void): any;
        on(eventName: string | symbol, listener: (...args: any[]) => void): any;
        once(eventName: string | symbol, listener: (...args: any[]) => void): any;
        removeListener(eventName: string | symbol, listener: (...args: any[]) => void): any;
        off(eventName: string | symbol, listener: (...args: any[]) => void): any;
        removeAllListeners(event?: string | symbol | undefined): any;
        setMaxListeners(n: number): any;
        getMaxListeners(): number;
        listeners(eventName: string | symbol): Function[];
        rawListeners(eventName: string | symbol): Function[];
        emit(eventName: string | symbol, ...args: any[]): boolean;
        listenerCount(eventName: string | symbol): number;
        prependListener(eventName: string | symbol, listener: (...args: any[]) => void): any;
        prependOnceListener(eventName: string | symbol, listener: (...args: any[]) => void): any;
        eventNames(): (string | symbol)[];
    };
    off(eventName: string | symbol, listener: (...args: any[]) => void): {
        drives: any[];
        verbose: any;
        watchers: any[];
        watch(): void;
        watcher: import("fs").FSWatcher | undefined;
        scan(): Promise<import("./Volume.js").Volume[]>;
        updateDrives(): Promise<void>;
        getDriveById(id: any): Promise<any>;
        eject(id: any): Promise<any>;
        ejectDevice(deviceName: any): Promise<any>;
        getDrive(driveName: any): Promise<any>;
        getDriveByMountpoint(mountpoint: any): any;
        getDriveBySerial(serialNumber: any): Promise<any>;
        getDrives(): Promise<any[]>;
        getMountPoint(mountpoint: any): Promise<any>;
        getCurrentVolumeName(serialNumber: any): Promise<any>;
        log(message: any, type: any): void;
        addListener(eventName: string | symbol, listener: (...args: any[]) => void): any;
        on(eventName: string | symbol, listener: (...args: any[]) => void): any;
        once(eventName: string | symbol, listener: (...args: any[]) => void): any;
        removeListener(eventName: string | symbol, listener: (...args: any[]) => void): any;
        off(eventName: string | symbol, listener: (...args: any[]) => void): any;
        removeAllListeners(event?: string | symbol | undefined): any;
        setMaxListeners(n: number): any;
        getMaxListeners(): number;
        listeners(eventName: string | symbol): Function[];
        rawListeners(eventName: string | symbol): Function[];
        emit(eventName: string | symbol, ...args: any[]): boolean;
        listenerCount(eventName: string | symbol): number;
        prependListener(eventName: string | symbol, listener: (...args: any[]) => void): any;
        prependOnceListener(eventName: string | symbol, listener: (...args: any[]) => void): any;
        eventNames(): (string | symbol)[];
    };
    removeAllListeners(event?: string | symbol | undefined): {
        drives: any[];
        verbose: any;
        watchers: any[];
        watch(): void;
        watcher: import("fs").FSWatcher | undefined;
        scan(): Promise<import("./Volume.js").Volume[]>;
        updateDrives(): Promise<void>;
        getDriveById(id: any): Promise<any>;
        eject(id: any): Promise<any>;
        ejectDevice(deviceName: any): Promise<any>;
        getDrive(driveName: any): Promise<any>;
        getDriveByMountpoint(mountpoint: any): any;
        getDriveBySerial(serialNumber: any): Promise<any>;
        getDrives(): Promise<any[]>;
        getMountPoint(mountpoint: any): Promise<any>;
        getCurrentVolumeName(serialNumber: any): Promise<any>;
        log(message: any, type: any): void;
        addListener(eventName: string | symbol, listener: (...args: any[]) => void): any;
        on(eventName: string | symbol, listener: (...args: any[]) => void): any;
        once(eventName: string | symbol, listener: (...args: any[]) => void): any;
        removeListener(eventName: string | symbol, listener: (...args: any[]) => void): any;
        off(eventName: string | symbol, listener: (...args: any[]) => void): any;
        removeAllListeners(event?: string | symbol | undefined): any;
        setMaxListeners(n: number): any;
        getMaxListeners(): number;
        listeners(eventName: string | symbol): Function[];
        rawListeners(eventName: string | symbol): Function[];
        emit(eventName: string | symbol, ...args: any[]): boolean;
        listenerCount(eventName: string | symbol): number;
        prependListener(eventName: string | symbol, listener: (...args: any[]) => void): any;
        prependOnceListener(eventName: string | symbol, listener: (...args: any[]) => void): any;
        eventNames(): (string | symbol)[];
    };
    setMaxListeners(n: number): {
        drives: any[];
        verbose: any;
        watchers: any[];
        watch(): void;
        watcher: import("fs").FSWatcher | undefined;
        scan(): Promise<import("./Volume.js").Volume[]>;
        updateDrives(): Promise<void>;
        getDriveById(id: any): Promise<any>;
        eject(id: any): Promise<any>;
        ejectDevice(deviceName: any): Promise<any>;
        getDrive(driveName: any): Promise<any>;
        getDriveByMountpoint(mountpoint: any): any;
        getDriveBySerial(serialNumber: any): Promise<any>;
        getDrives(): Promise<any[]>;
        getMountPoint(mountpoint: any): Promise<any>;
        getCurrentVolumeName(serialNumber: any): Promise<any>;
        log(message: any, type: any): void;
        addListener(eventName: string | symbol, listener: (...args: any[]) => void): any;
        on(eventName: string | symbol, listener: (...args: any[]) => void): any;
        once(eventName: string | symbol, listener: (...args: any[]) => void): any;
        removeListener(eventName: string | symbol, listener: (...args: any[]) => void): any;
        off(eventName: string | symbol, listener: (...args: any[]) => void): any;
        removeAllListeners(event?: string | symbol | undefined): any;
        setMaxListeners(n: number): any;
        getMaxListeners(): number;
        listeners(eventName: string | symbol): Function[];
        rawListeners(eventName: string | symbol): Function[];
        emit(eventName: string | symbol, ...args: any[]): boolean;
        listenerCount(eventName: string | symbol): number;
        prependListener(eventName: string | symbol, listener: (...args: any[]) => void): any;
        prependOnceListener(eventName: string | symbol, listener: (...args: any[]) => void): any;
        eventNames(): (string | symbol)[];
    };
    getMaxListeners(): number;
    listeners(eventName: string | symbol): Function[];
    rawListeners(eventName: string | symbol): Function[];
    emit(eventName: string | symbol, ...args: any[]): boolean;
    listenerCount(eventName: string | symbol): number;
    prependListener(eventName: string | symbol, listener: (...args: any[]) => void): {
        drives: any[];
        verbose: any;
        watchers: any[];
        watch(): void;
        watcher: import("fs").FSWatcher | undefined;
        scan(): Promise<import("./Volume.js").Volume[]>;
        updateDrives(): Promise<void>;
        getDriveById(id: any): Promise<any>;
        eject(id: any): Promise<any>;
        ejectDevice(deviceName: any): Promise<any>;
        getDrive(driveName: any): Promise<any>;
        getDriveByMountpoint(mountpoint: any): any;
        getDriveBySerial(serialNumber: any): Promise<any>;
        getDrives(): Promise<any[]>;
        getMountPoint(mountpoint: any): Promise<any>;
        getCurrentVolumeName(serialNumber: any): Promise<any>;
        log(message: any, type: any): void;
        addListener(eventName: string | symbol, listener: (...args: any[]) => void): any;
        on(eventName: string | symbol, listener: (...args: any[]) => void): any;
        once(eventName: string | symbol, listener: (...args: any[]) => void): any;
        removeListener(eventName: string | symbol, listener: (...args: any[]) => void): any;
        off(eventName: string | symbol, listener: (...args: any[]) => void): any;
        removeAllListeners(event?: string | symbol | undefined): any;
        setMaxListeners(n: number): any;
        getMaxListeners(): number;
        listeners(eventName: string | symbol): Function[];
        rawListeners(eventName: string | symbol): Function[];
        emit(eventName: string | symbol, ...args: any[]): boolean;
        listenerCount(eventName: string | symbol): number;
        prependListener(eventName: string | symbol, listener: (...args: any[]) => void): any;
        prependOnceListener(eventName: string | symbol, listener: (...args: any[]) => void): any;
        eventNames(): (string | symbol)[];
    };
    prependOnceListener(eventName: string | symbol, listener: (...args: any[]) => void): {
        drives: any[];
        verbose: any;
        watchers: any[];
        watch(): void;
        watcher: import("fs").FSWatcher | undefined;
        scan(): Promise<import("./Volume.js").Volume[]>;
        updateDrives(): Promise<void>;
        getDriveById(id: any): Promise<any>;
        eject(id: any): Promise<any>;
        ejectDevice(deviceName: any): Promise<any>;
        getDrive(driveName: any): Promise<any>;
        getDriveByMountpoint(mountpoint: any): any;
        getDriveBySerial(serialNumber: any): Promise<any>;
        getDrives(): Promise<any[]>;
        getMountPoint(mountpoint: any): Promise<any>;
        getCurrentVolumeName(serialNumber: any): Promise<any>;
        log(message: any, type: any): void;
        addListener(eventName: string | symbol, listener: (...args: any[]) => void): any;
        on(eventName: string | symbol, listener: (...args: any[]) => void): any;
        once(eventName: string | symbol, listener: (...args: any[]) => void): any;
        removeListener(eventName: string | symbol, listener: (...args: any[]) => void): any;
        off(eventName: string | symbol, listener: (...args: any[]) => void): any;
        removeAllListeners(event?: string | symbol | undefined): any;
        setMaxListeners(n: number): any;
        getMaxListeners(): number;
        listeners(eventName: string | symbol): Function[];
        rawListeners(eventName: string | symbol): Function[];
        emit(eventName: string | symbol, ...args: any[]): boolean;
        listenerCount(eventName: string | symbol): number;
        prependListener(eventName: string | symbol, listener: (...args: any[]) => void): any;
        prependOnceListener(eventName: string | symbol, listener: (...args: any[]) => void): any;
        eventNames(): (string | symbol)[];
    };
    eventNames(): (string | symbol)[];
};
//# sourceMappingURL=index.d.ts.map